name: Build

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read # Fetch code (actions/checkout)
  packages: write # Upload and publish packages to GitHub Packages

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            deps_name: x64-windows-rel
            vcpkg_path: C:\mixxx-vcpkg
            vcpkg_buildtrees-root: C:\build
            vcpkg_bootstrap: .\bootstrap-vcpkg.bat
            vcpkg_triplet: x64-windows-release
            vcpkg_host_triplet: x64-windows-release
            check_disk_space: Get-PSDrive
          - os: windows-11-arm
            deps_name: arm64-windows-rel
            vcpkg_path: C:\mixxx-vcpkg
            vcpkg_buildtrees-root: C:\build
            vcpkg_bootstrap: .\bootstrap-vcpkg.bat
            vcpkg_triplet: arm64-windows-release
            vcpkg_host_triplet: arm64-windows-release
            check_disk_space: Get-PSDrive
          - os: macos-15-intel
            deps_name: x64-osx-rel
            vcpkg_path: /Users/runner/mixxx-vcpkg
            vcpkg_buildtrees-root: /Users/runner/mixxx-vcpkg/buildtrees
            vcpkg_bootstrap: ./bootstrap-vcpkg.sh
            vcpkg_triplet: x64-osx-min1100-release
            vcpkg_host_triplet: x64-osx-min1100-release
            developer_dir: /Applications/Xcode_16.4.app/Contents/Developer
            check_disk_space: df -h
          - os: macos-15-intel
            deps_name: arm64-osx-cross-rel
            vcpkg_path: /Users/runner/mixxx-vcpkg
            vcpkg_buildtrees-root: /Users/runner/mixxx-vcpkg/buildtrees
            vcpkg_bootstrap: ./bootstrap-vcpkg.sh
            vcpkg_triplet: arm64-osx-min1100-release
            vcpkg_host_triplet: x64-osx-min1100-release
            developer_dir: /Applications/Xcode_16.4.app/Contents/Developer
            check_disk_space: df -h
          - os: macos-15
            deps_name: arm64-osx-rel
            vcpkg_path: /Users/runner/mixxx-vcpkg
            vcpkg_buildtrees-root: /Users/runner/mixxx-vcpkg/buildtrees
            vcpkg_bootstrap: ./bootstrap-vcpkg.sh
            vcpkg_triplet: arm64-osx-min1100-release
            vcpkg_host_triplet: arm64-osx-min1100-release
            developer_dir: /Applications/Xcode_16.4.app/Contents/Developer
            brew_extra: libtool
            check_disk_space: df -h
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkg_triplet }}
      VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.vcpkg_host_triplet }}
      DEPS_BASE_NAME: mixxx-deps
      DEVELOPER_DIR: ${{ matrix.developer_dir }}
      MIXXX_VERSION: 2.6
    name: ${{ matrix.deps_name }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Check out git repository
      uses: actions/checkout@v4
      with:
        path: mixxx-vcpkg
      
      # Workaround for issues https://github.com/microsoft/vcpkg/issues/8272  
      # and https://github.com/actions/checkout/issues/197 
      # to keep the build path short and work around size limits on the windows runner D: drive 
    - name: Move checkout
      run: cmake -E copy_directory ${{ github.workspace }}/mixxx-vcpkg ${{ matrix.vcpkg_path }}

    - name: "Work around actions/runner-images#9966"
      if: matrix.os == 'macos-15-intel'
      run: |
        brew list -1 | grep python@ | while read formula; do
          brew unlink $formula
          brew link --overwrite $formula
        done
       
  
    - name: "[macOS] Install dependencies for nuget & vcpkg"
      if: runner.os == 'macOS'
      run: |
          brew update && brew install automake nasm autoconf-archive nuget ${{ matrix.brew_extra }}
          sudo xcode-select --switch "$DEVELOPER_DIR"
          xcrun --show-sdk-version

    - name: "Authenticate to GitHub Packages (readwrite)"
      if: runner.os != 'Linux' && github.event_name == 'push' && github.repository_owner == 'mixxxdj'
      shell: bash
      run: |
        nuget sources add -Name "mixxx-github-packages" -Source "https://nuget.pkg.github.com/mixxxdj/index.json" -UserName "${{ github.repository_owner }}" -Password "${{ secrets.GITHUB_TOKEN }}" -StorePasswordInClearText
        nuget setapikey "${{ secrets.GITHUB_TOKEN }}" -Source "mixxx-github-packages"
        echo "VCPKG_BINARY_SOURCES=clear;nuget,mixxx-github-packages,readwrite;" >> "${GITHUB_ENV}"
        
    - name: "Authenticate to GitHub Packages (read only)"
      if: runner.os != 'Linux' && (github.event_name == 'pull_request' || github.repository_owner != 'mixxxdj') 
      shell: bash
      run: |
        nuget sources add -Name "mixxx-github-packages" -Source "https://nuget.pkg.github.com/mixxxdj/index.json" -UserName "${{ github.repository_owner }}" -Password "${{ secrets.GITHUB_TOKEN }}" -StorePasswordInClearText
        nuget setapikey "${{ secrets.GITHUB_TOKEN }}" -Source "mixxx-github-packages"
        echo "VCPKG_BINARY_SOURCES=clear;nuget,mixxx-github-packages,read;" >> "${GITHUB_ENV}"   

    - name: Read sha_short
      id: vars
      shell: bash
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      working-directory: ${{ matrix.vcpkg_path }}

    - name: Bootstrap vcpkg
      run: ${{ matrix.vcpkg_bootstrap }}
      working-directory: ${{ matrix.vcpkg_path }}
      
    - name: Check available disk space
      run: ${{ matrix.check_disk_space }}

    - name: Build packages
      run: ./vcpkg install --vcpkg-root=${{ matrix.vcpkg_path }} --x-buildtrees-root=${{ matrix.vcpkg_buildtrees-root }} --clean-after-build --recurse --feature-flags="-compilertracking,manifests,registries,versions" --x-abi-tools-use-exact-versions
      working-directory: ${{ matrix.vcpkg_path }}
      
    - name: "[Windows] Sign release DLLs"
      env:
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      if: runner.os == 'Windows' && env.AZURE_TENANT_ID
      uses: azure/trusted-signing-action@v0.5.1
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        endpoint: https://weu.codesigning.azure.net/
        trusted-signing-account-name: mixxx
        certificate-profile-name: mixxx
        files-folder: ${{ matrix.vcpkg_path }}/vcpkg_installed/${{ matrix.vcpkg_triplet }}/bin
        files-folder-filter: dll
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256
        timeout: 600
        
    - name: "[Windows] Sign release plugins"
      env:
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      if: runner.os == 'Windows' && env.AZURE_TENANT_ID
      uses: azure/trusted-signing-action@v0.5.1
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        endpoint: https://weu.codesigning.azure.net/
        trusted-signing-account-name: mixxx
        certificate-profile-name: mixxx
        files-folder: ${{ matrix.vcpkg_path }}/vcpkg_installed/${{ matrix.vcpkg_triplet }}/Qt6/plugins
        files-folder-filter: dll
        files-folder-recurse: true
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256
        timeout: 600
        
    - name: "[Windows] Sign qml DLLs"
      env:
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      if: runner.os == 'Windows' && env.AZURE_TENANT_ID
      uses: azure/trusted-signing-action@v0.5.1
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        endpoint: https://weu.codesigning.azure.net/
        trusted-signing-account-name: mixxx
        certificate-profile-name: mixxx
        files-folder: ${{ matrix.vcpkg_path }}/vcpkg_installed/${{ matrix.vcpkg_triplet }}/Qt6/qml
        files-folder-filter: dll
        files-folder-recurse: true
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256
        timeout: 600

    - name: Upload GitHub Actions artifacts of build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.deps_name }}
        path: ${{ matrix.vcpkg_path  }}/buildtrees/**/*.log

    - name: Create buildenv archive
      run: ./vcpkg export --vcpkg-root=${{ matrix.vcpkg_path }} --x-all-installed --zip --output=${{ env.DEPS_BASE_NAME }}-${{ env.MIXXX_VERSION }}-${{ matrix.deps_name }}-${{ steps.vars.outputs.sha_short }} --output-dir=${{ matrix.vcpkg_path }}
      working-directory: ${{ matrix.vcpkg_path }}
      
    - name: "[Windows x64] Install additional tools"
      if: matrix.os == 'windows-2022' && env.SSH_PASSWORD != null
      env:
        SSH_PASSWORD: ${{ secrets.DOWNLOADS_HOSTGATOR_DOT_MIXXX_DOT_ORG_KEY_PASSWORD }}
      run: |
        $Env:PATH="C:\msys64\usr\bin;$Env:PATH"
        pacman -S --noconfirm coreutils bash rsync openssh
        Add-Content -Path "$Env:GITHUB_ENV" -Value "PATH=$Env:PATH"
        
    - name: "[Windows ARM64] Install additional tools"
      if: matrix.os == 'windows-11-arm' && env.SSH_PASSWORD != null
      env:
        SSH_PASSWORD: ${{ secrets.DOWNLOADS_HOSTGATOR_DOT_MIXXX_DOT_ORG_KEY_PASSWORD }}
      run: |
        choco install msys2 -y
        $Env:PATH="C:\tools\msys64\usr\bin;$Env:PATH"
        pacman -S --noconfirm coreutils bash rsync openssh
        Add-Content -Path "$Env:GITHUB_ENV" -Value "PATH=$Env:PATH"

    - name: "Upload build to downloads.mixxx.org"
      if: github.event_name == 'push' && env.SSH_PASSWORD != null
      # Use retry loop to work around intermittent transfer issue
      uses: nick-fields/retry@9417ab499314dfe692edb043ded2ff9b3f5f0a68 # v3
      with:
        max_attempts: 10
        timeout_minutes: 20
        retry_wait_seconds: 5
        command: |
          cd ${{ matrix.vcpkg_path }}
          bash .github/deploy.sh ${{ env.DEPS_BASE_NAME }}-${{ env.MIXXX_VERSION }}-${{ matrix.deps_name }}-${{ steps.vars.outputs.sha_short }}.zip
        on_retry_command: |
          killall ssh-agent || true
      env:
        DESTDIR: public_html/downloads/dependencies
        OS: ${{ runner.os }}
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        SSH_HOST: downloads-hostgator.mixxx.org
        SSH_KEY: ${{ secrets.DOWNLOADS_HOSTGATOR_DOT_MIXXX_DOT_ORG_KEY }}
        SSH_PASSWORD: ${{ secrets.DOWNLOADS_HOSTGATOR_DOT_MIXXX_DOT_ORG_KEY_PASSWORD }}
        SSH_USER: mixxx
        UPLOAD_ID: ${{ github.run_id }}

    - name: Upload GitHub Actions artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEPS_BASE_NAME }}-${{ env.MIXXX_VERSION }}-${{ matrix.deps_name }}-${{ steps.vars.outputs.sha_short }}
        path: ${{ matrix.vcpkg_path }}/${{ env.DEPS_BASE_NAME }}-${{ env.MIXXX_VERSION }}-${{ matrix.deps_name }}-${{ steps.vars.outputs.sha_short }}.zip

    # Workaround for https://github.com/actions/cache/issues/531
    - name: Use system tar & zstd from Chocolatey for caching
      shell: bash
      run: |
        echo "C:/Windows/System32;C:/ProgramData/Chocolatey/bin" >> $GITHUB_PATH
